#ifndef YU_LANG_ENDIAN_HPP_
#define YU_LANG_ENDIAN_HPP_

namespace yu {
namespace lang {

inline bool is_little_endian() {
  int n = 1;
  return *reinterpret_cast<char*>(&n) == 1;
}

inline uint16_t to_big_endian(uint16_t n) {
  if (!is_little_endian()) return n;
  return
    ((n << 8) & 0b1111111100000000) |
    ((n >> 8) & 0b0000000011111111);
}

inline uint32_t to_big_endian(uint32_t n) {
  if (!is_little_endian()) return n;
  return
    ((n << 24) & 0b11111111000000000000000000000000) |
    ((n <<  8) & 0b00000000111111110000000000000000) |
    ((n >>  8) & 0b00000000000000001111111100000000) |
    ((n >> 24) & 0b00000000000000000000000011111111);
}

inline uint64_t to_big_endian(uint64_t n) {
  if (!is_little_endian()) return n;
  return
    ((n << 56) & 0b1111111100000000000000000000000000000000000000000000000000000000) |
    ((n << 40) & 0b0000000011111111000000000000000000000000000000000000000000000000) |
    ((n << 24) & 0b0000000000000000111111110000000000000000000000000000000000000000) |
    ((n <<  8) & 0b0000000000000000000000001111111100000000000000000000000000000000) |
    ((n >>  8) & 0b0000000000000000000000000000000011111111000000000000000000000000) |
    ((n >> 24) & 0b0000000000000000000000000000000000000000111111110000000000000000) |
    ((n >> 40) & 0b0000000000000000000000000000000000000000000000001111111100000000) |
    ((n >> 56) & 0b0000000000000000000000000000000000000000000000000000000011111111);
}

}  // namespace lang
}  // namespace yu

#endif  // YU_LANG_ENDIAN_HPP_
